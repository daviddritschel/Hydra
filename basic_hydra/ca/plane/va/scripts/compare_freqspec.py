#======================================================================
# Creates frequency power spectra for the divergence sampled at a few
# specific points (nsamp x nsamp) from data generated by caps.f90.

# Compares data from different directories specified below.
#======================================================================

#=====perform various generic imports=====
import warnings,os,sys
import numpy as np

import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib import rcParams
from matplotlib import rc
rcParams.update({'figure.autolayout': True})
warnings.simplefilter("ignore",DeprecationWarning)

## global settings

# set tick label size:
label_size = 25
mpl.rcParams['xtick.labelsize'] = label_size
mpl.rcParams['ytick.labelsize'] = label_size
# set x tick width and size:
mpl.rcParams['xtick.major.size'] = 10
mpl.rcParams['xtick.major.width'] = 2
mpl.rcParams['xtick.minor.size'] = 5
mpl.rcParams['xtick.minor.width'] = 1
# set y tick width and size:
mpl.rcParams['ytick.major.size'] = 10
mpl.rcParams['ytick.major.width'] = 2
mpl.rcParams['ytick.minor.size'] = 5
mpl.rcParams['ytick.minor.width'] = 1

# Ensure latex fonts throughout:
rc('font', **{'family': 'Times New Roman'})
rc('text', usetex=True)

#=================================================================
# Specify the data directories (need final /):
basedir='/home/dgd/data/hydra/ca/plane/'
dir_list=[basedir+'sw/caps/ranpv/ng256kd6dr10r001/', \
          basedir+'va/caps/ranpv/ng256H0.1kd6dr10r001/', \
          basedir+'va/caps/ranpv/ng256H0.2kd6dr10r001/', \
          basedir+'va/caps/ranpv/ng256H0.4kd6dr10r001/']
# Corresponding labels on the curves plotted (modify as necessary):
label_list=['$H=0$','$H=0.1$','$H=0.2$','$H=0.4$']
# Corresponding values of H:
hbar_list=np.array([0.0,0.1,0.2,0.4])
# Corresponding values of kd:
kd_list=np.array([6,6,6,6])
# Corresponding colours (allow up to 4 directories):
colorlist=['k','b','r','m']

# Coriolis frequency:
twopi=2.0*np.pi
cof=2.0*twopi

# Corresponding scaled frequency in the plot:
om1=cof/twopi

print()
opt_in = input(' Add vertical lines showing N (1 = yes, 0 = no; default 0)? ')
fshow = int(opt_in or 0)

#=================================================================
# Set up figure:
fig1 = plt.figure(1,figsize=[10,6])
ax1 = fig1.add_subplot(111)
ax1.set_xlabel('$\log_{10}T^{-1}$', fontsize=30)
ax1.set_ylabel('$\log_{10}{\mathcal{P}}_\\delta$', fontsize=30)
ax1.axvline(np.log10(om1),color='c',linestyle='--')
# Limits in log_10{f}:
#xlims=[-2.5,1.5]
#ax1.set_xlim(xlims)

# Default sample size:
nsamp = 4
n = int(nsamp)**2

#=================================================================
# Loop over directories and process:
twopi=2.0*np.pi
sq3=np.sqrt(3.0)
for m,dir in enumerate(dir_list):
   nt = sum(1 for line in open(dir+'spectra/dsamp.asc'))

   time=np.zeros(nt)
   d=np.zeros((nt,n))

   in_file=open(dir+'spectra/dsamp.asc','r')
   for j in range(nt):
      line=in_file.readline()  
      string=line.split()
      time[j]=float(string[0])
      for i in range(n):
         d[j,i]=float(string[i+1])

   in_file.close()

   # Create array holding the frequencies:
   time_step = time[1] - time[0]
   freqs = np.fft.fftfreq(time.size, time_step)

   # Accumulate power spectra:
   Sd=np.zeros(nt)
   for k in range(n):
      ps=np.abs(np.fft.fft(d[:,k]))**2
      Sd+=ps
   Sd=Sd/float(n)
   
   # As signal is real, fold over and add spectrum:
   nh_times=int((nt-1)/2)
   for i in range(1,nh_times):
      Sd[i]=Sd[i]+Sd[nt-i]

   logomega=np.log10(freqs[1:nh_times])
   logSd=np.log10(Sd[1:nh_times])

   if fshow==1:
      # Plot N/(2*pi):
      hbar=hbar_list[m]
      if hbar > 0.0:
         kd=kd_list[m]
         bvf=sq3*cof/(kd*hbar)
         om2=bvf/twopi
         ax1.axvline(np.log10(om2),color=colorlist[m],linestyle='--')

   ax1.plot(logomega,logSd,c=colorlist[m],lw=1,label=label_list[m])
   ax1.legend(loc='lower left',prop={'size':25})

fig1.savefig('d_fspec_compare.eps', format='eps', dpi=600)

print()
print(' To view the frequency spectrum, type')
print()
print(' gv d_fspec_compare.eps &')
print()
