#!/usr/bin/env python

# This script plots b_0/(fN), zeta/f, xi/N and eta/N at a
# selected time. Note, (xi,eta)/N = -nabla_h(b_0)/(fN).

#     @@@@   Run from the current job directory   @@@@

#========== Perform the generic imports =========

# Python 2D FFTs:
import sys,os,warnings
uname=os.getlogin()
homedir=os.getenv('HOME')
moddir=os.path.join(homedir,'hydra','lib','pyfft')
sys.path.append(moddir)
from fft2d import FFT

# Numpy and matplotlib:
import numpy as np
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.artist import setp
import matplotlib.cm as cm
import matplotlib as mpl
from matplotlib import rcParams
from matplotlib import rc
rcParams.update({'figure.autolayout': True})
warnings.simplefilter("ignore",DeprecationWarning)

# Ensure latex fonts throughout:
rc('font', **{'family': 'Times New Roman'})
rc('text', usetex=True)

# set tick label size:
label_size = 20
mpl.rcParams['xtick.labelsize'] = label_size
mpl.rcParams['ytick.labelsize'] = label_size
# set x tick width and size:
mpl.rcParams['xtick.major.size'] = 5
mpl.rcParams['xtick.major.width'] = 2
mpl.rcParams['xtick.minor.size'] = 3
mpl.rcParams['xtick.minor.width'] = 1
# set y tick width and size:
mpl.rcParams['ytick.major.size'] = 5
mpl.rcParams['ytick.major.width'] = 2
mpl.rcParams['ytick.minor.size'] = 3
mpl.rcParams['ytick.minor.width'] = 1
# set axes width:
mpl.rcParams['axes.linewidth'] = 1

#====================== Function definitions =======================
def contint(fmin,fmax):
    #Determines a nice contour interval (giving 10-20 divisions with
    #interval 1, 2 or 5x10^m for some m) given the minimum & maximum
    #values of the field data (fmin & fmax).

    fmax = 0.9999999*fmax
    fmin = 0.9999999*fmin
    #The 0.99... factor avoids having a superfluous tick interval
    #in cases where fmax-fmin is 10^m or 2x10^m

    emag = 1.0
    rmult = fmax-fmin
    while rmult < 10:
       emag = emag/10
       rmult = rmult*10

    while rmult >=  100:
       emag = emag*10
       rmult = rmult/10

    kmult = int(rmult/10)

    if kmult < 1:
       ci = emag
    elif kmult < 2:
       ci = 2*emag
    elif kmult < 4:
       ci = 4*emag
    elif kmult < 8:
       ci = 10*emag
    else:
       ci = 20*emag

    return ci

#---------------------------------------------------------------------------
# Open ene-ens.asc file to get the available times for plotting:
in_file=open('ene-ens.asc','r')
time, ene, ens = np.loadtxt(in_file,dtype=float,unpack=True)
in_file.close()

# Select time to image:
print()
t_def=60
t_in=input(' Time to image (default '+str(t_def)+')? ')
t=float(t_in or t_def)

# Find frame in data:
frame=0
while abs(time[frame]-t) > 0.001:
    frame+=1
print(' Selected t =',time[frame])

print
ng_in=input(' Resolution (default 2048)? ')
ng=int(ng_in or 2048)
N=ng*ng

# To show more contour lines in main image:
mult = 2

#---------------------------------------------------------------------------
# Open and read buoyancy data file:
in_file=open('bb.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()
# Set up array to contain data:
bb=np.empty([ng+1,ng+1])

# Read average buoyancy for plotting purposes:
in_file = open('average_qq.asc','r')
boff = np.loadtxt(in_file,dtype=float,unpack=True)
in_file.close()

# Get data at selected time:
bb[0:ng,0:ng]=boff+raw_array[frame*(N+1)+1:(frame+1)*(N+1)].reshape(ng,ng)

# Fix the min/max b values:
if frame > 0:
    bmin = -0.01
    bmax = 1.01
else:
    bmin = 0.0
    bmax = 1.0

# Obtain contour levels for plotting the colorbars:
db = contint(bmin,bmax)
jmin = -int(-bmin/db)
jmax =  int( bmax/db)
blevels = np.linspace(db*float(jmin),db*float(jmax),jmax-jmin+1)

db = db/mult
jmin = -int(-bmin/db)
jmax =  int( bmax/db)
blevelsf = np.linspace(db*float(jmin),db*float(jmax),jmax-jmin+1)

# Compute xi = -b_x and eta = -b_y (use arrays xx & yy):
ncells = [ng, ng]
extent = [2.0*np.pi, 2.0*np.pi]

fft = FFT(ncells, extent)

bs = fft.fftxyp2s(bb[0:ng,0:ng])
ds = fft.diffx(bs)
xx=np.empty([ng+1,ng+1])
xx[0:ng,0:ng] = -fft.fftxys2p(ds)
ds = fft.diffy(bs)
yy=np.empty([ng+1,ng+1])
yy[0:ng,0:ng] = -fft.fftxys2p(ds)
  
# Add periodic edges:
bb[ng,0:ng]=bb[0,0:ng]
bb[0:ng+1,ng]=bb[0:ng+1,0]
xx[ng,0:ng]=xx[0,0:ng]
xx[0:ng+1,ng]=xx[0:ng+1,0]
yy[ng,0:ng]=yy[0,0:ng]
yy[0:ng+1,ng]=yy[0:ng+1,0]

# Get min/max values for xx:
xmin = np.amin(xx)
xmax = np.amax(xx)
xmag = max(-xmin,xmax)
if frame > 0:
    xrms = np.sqrt(np.sum(xx[0:ng,0:ng]**2)/float(N))
    p = 0.75
    xmax = xmag**p*xrms**(1.0-p)
    xmin = -xmax
else:
    xmag = xmag
    xmin = -xmax

# Obtain contour levels for plotting the colorbars:
dx = contint(xmin,xmax)
jmin = -int(-xmin/dx)
jmax =  int( xmax/dx)
xlevels = np.linspace(dx*float(jmin),dx*float(jmax),jmax-jmin+1)

dx = dx/mult
jmin = -int(-xmin/dx)
jmax =  int( xmax/dx)
xlevelsf = np.linspace(dx*float(jmin),dx*float(jmax),jmax-jmin+1)

# Get min/max values for yy:
ymin = np.amin(yy)
ymax = np.amax(yy)
ymag = max(-ymin,ymax)
if frame > 0:
    yrms = np.sqrt(np.sum(yy[0:ng,0:ng]**2)/float(N))
    p = 0.75
    ymax = ymag**p*yrms**(1.0-p)
    ymin = -ymax
else:
    ymag = ymag
    ymin = -ymax

# Obtain contour levels for plotting the colorbars:
dy = contint(ymin,ymax)
jmin = -int(-ymin/dy)
jmax =  int( ymax/dy)
ylevels = np.linspace(dy*float(jmin),dy*float(jmax),jmax-jmin+1)

dy = dy/mult
jmin = -int(-ymin/dy)
jmax =  int( ymax/dy)
ylevelsf = np.linspace(dy*float(jmin),dy*float(jmax),jmax-jmin+1)

#---------------------------------------------------------------------------
# Open and read vertical vorticity data file:
in_file=open('zz.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()
# Set up array to contain data:
zz=np.empty([ng+1,ng+1])

zz[0:ng,0:ng]=raw_array[frame*(N+1)+1:(frame+1)*(N+1)].reshape(ng,ng)
zz[ng,0:ng]=zz[0,0:ng]
zz[0:ng+1,ng]=zz[0:ng+1,0]

# Get min/max values:
zmin = np.amin(zz)
zmax = np.amax(zz)
zmag = max(-zmin,zmax)
if frame > 0:
    zrms = np.sqrt(np.sum(zz[0:ng,0:ng]**2)/float(N))
    p = 0.75
    zmax = zmag**p*zrms**(1.0-p)
    zmin = -zmax
else:
    zmax = zmag
    zmin = -zmax

# Obtain contour levels for plotting the colorbars:
dz = contint(zmin,zmax)
jmin = -int(-zmin/dz)
jmax =  int( zmax/dz)
zlevels = np.linspace(dz*float(jmin),dz*float(jmax),jmax-jmin+1)

dz = dz/mult
jmin = -int(-zmin/dz)
jmax =  int( zmax/dz)
zlevelsf = np.linspace(dz*float(jmin),dz*float(jmax),jmax-jmin+1)
    
#---------------------------------------------------------------------------
# Set up figure:
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(figsize=[12,11.4], nrows=2, ncols=2)

ax1.set_xlim([-np.pi,np.pi])
ax1.set_ylim([-np.pi,np.pi])
ax2.set_xlim([-np.pi,np.pi])
ax2.set_ylim([-np.pi,np.pi])
ax3.set_xlim([-np.pi,np.pi])
ax3.set_ylim([-np.pi,np.pi])
ax4.set_xlim([-np.pi,np.pi])
ax4.set_ylim([-np.pi,np.pi])

# Customise tick values:
ax1.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax2.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax3.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax4.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax1.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax2.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax3.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax4.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)

ax1.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax2.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax3.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax4.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax1.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax2.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax3.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax4.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)

# Fine-tune figure; hide x ticks for upper plots:
plt.setp(ax1.get_xticklabels(), visible=False)
plt.setp(ax2.get_xticklabels(), visible=False)

# Fine-tune figure; hide y ticks for right plots:
plt.setp(ax2.get_yticklabels(), visible=False)
plt.setp(ax4.get_yticklabels(), visible=False)

ax1.set_title('$b/(fNL)$', fontsize=20)
ax2.set_title('$\\zeta/f$', fontsize=20)
ax3.set_title('$\\xi/N$', fontsize=20)
ax4.set_title('$\\eta/N$', fontsize=20)

ax3.set_xlabel('$x/L$', fontsize=20)
ax4.set_xlabel('$x/L$', fontsize=20)
ax1.set_ylabel('$y/L$', fontsize=20)
ax3.set_ylabel('$y/L$', fontsize=20)

extent=(-np.pi,np.pi,-np.pi,np.pi)

# Plot the images in an array with an optional colourbar:
im1=ax1.imshow(bb.T,cmap=cm.bwr,vmin=bmin,vmax=bmax,extent=extent,origin='lower',interpolation='bilinear')
cs1=ax1.contour(bb.T, blevels, colors='k', extent=extent, linewidths=1)
divider = make_axes_locatable(ax1)
cax1 = divider.append_axes("right", size="4%", pad=0.1)
cbar=fig.colorbar(im1, cax=cax1, ticks=blevels)
cbar.add_lines(cs1)
cm.bwr.set_under('cyan')
cm.bwr.set_over('yellow')

im2=ax2.imshow(zz.T,cmap=cm.bwr,vmin=zmin,vmax=zmax,extent=extent,origin='lower',interpolation='bilinear')
cs2=ax2.contour(zz.T, zlevels, colors='k', extent=extent, linewidths=1)
divider = make_axes_locatable(ax2)
cax2 = divider.append_axes("right", size="4%", pad=0.1)
cbar=fig.colorbar(im2, cax=cax2, ticks=zlevels)
cbar.add_lines(cs2)
cm.bwr.set_under('cyan')
cm.bwr.set_over('yellow')

im3=ax3.imshow(xx.T,cmap=cm.bwr,vmin=xmin,vmax=xmax,extent=extent,origin='lower',interpolation='bilinear')
cs3=ax3.contour(xx.T, xlevels, colors='k', extent=extent, linewidths=1)
divider = make_axes_locatable(ax3)
cax3 = divider.append_axes("right", size="4%", pad=0.1)
cbar=fig.colorbar(im3, cax=cax3, ticks=xlevels)
cbar.add_lines(cs3)
cm.bwr.set_under('cyan')
cm.bwr.set_over('yellow')

im4=ax4.imshow(yy.T,cmap=cm.bwr,vmin=ymin,vmax=ymax,extent=extent,origin='lower',interpolation='bilinear')
cs4=ax4.contour(yy.T, ylevels, colors='k', extent=extent, linewidths=1)
divider = make_axes_locatable(ax4)
cax4 = divider.append_axes("right", size="4%", pad=0.1)
cbar=fig.colorbar(im4, cax=cax4, ticks=ylevels)
cbar.add_lines(cs4)
cm.bwr.set_under('cyan')
cm.bwr.set_over('yellow')

fig.subplots_adjust(wspace=0.4, hspace=0.0)

#=========================================================================
# Save image:
figfile='t'+str(t)+'.pdf'
fig.savefig(figfile, format='pdf', dpi=600)
print()
print(' To view the image, type')
print()
print(' ev '+figfile)
print()
