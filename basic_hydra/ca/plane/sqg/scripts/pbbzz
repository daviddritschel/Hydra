#!/usr/bin/env python

# This script plots b_0/N and zeta at a selected time

#     @@@@   Run from the current job directory   @@@@

#========== Perform the generic imports =========
import sys,os,warnings
import numpy as np
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.artist import setp
import matplotlib.cm as cm
import matplotlib as mpl
from matplotlib import rcParams
from matplotlib import rc
rcParams.update({'figure.autolayout': True})
warnings.simplefilter("ignore",DeprecationWarning)

# Ensure latex fonts throughout:
rc('font', **{'family': 'Times New Roman'})
rc('text', usetex=True)

# set tick label size:
label_size = 20
mpl.rcParams['xtick.labelsize'] = label_size
mpl.rcParams['ytick.labelsize'] = label_size
# set x tick width and size:
mpl.rcParams['xtick.major.size'] = 5
mpl.rcParams['xtick.major.width'] = 2
mpl.rcParams['xtick.minor.size'] = 3
mpl.rcParams['xtick.minor.width'] = 1
# set y tick width and size:
mpl.rcParams['ytick.major.size'] = 5
mpl.rcParams['ytick.major.width'] = 2
mpl.rcParams['ytick.minor.size'] = 3
mpl.rcParams['ytick.minor.width'] = 1
# set axes width:
mpl.rcParams['axes.linewidth'] = 1

#====================== Function definitions =======================
def contint(fmin,fmax):
    #Determines a nice contour interval (giving 10-20 divisions with
    #interval 1, 2 or 5x10^m for some m) given the minimum & maximum
    #values of the field data (fmin & fmax).

    fmax = 0.9999999*fmax
    fmin = 0.9999999*fmin
    #The 0.99... factor avoids having a superfluous tick interval
    #in cases where fmax-fmin is 10^m or 2x10^m

    emag = 1.0
    rmult = fmax-fmin
    while rmult < 10:
       emag = emag/10
       rmult = rmult*10

    while rmult >=  100:
       emag = emag*10
       rmult = rmult/10

    kmult = int(rmult/10)

    if kmult < 1:
       ci = emag
    elif kmult < 2:
       ci = 2*emag
    elif kmult < 4:
       ci = 4*emag
    elif kmult < 8:
       ci = 10*emag
    else:
       ci = 20*emag

    return ci

#---------------------------------------------------------------------------
# Select data to image:
print()
q_in=input(' Frame to plot (default 0)? ')
frame=int(q_in or 0)

field_list=['b_0','zeta']
field_acro=['bb','zz']

print()
ng_in=input(' Resolution (default 2048)? ')
ng=int(ng_in or 2048)
N=ng*ng

# To show more contour lines in main image:
mult = 2

#---------------------------------------------------------------------------
# Open ene-ens.asc file to get the available times for plotting:
in_file=open('ene-ens.asc','r')
time, ene, ens = np.loadtxt(in_file,dtype=float,unpack=True)
in_file.close()

# Read average buoyancy for plotting purposes:
in_file = open('average_qq.asc','r')
offset = np.loadtxt(in_file,dtype=float,unpack=True)
in_file.close()

# Open and read buoyancy data file:
in_file=open('bb.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()

# Set up array to contain data:
b=np.empty([ng+1,ng+1])

# Fix the min/max values using data at the initial time:
b[0:ng,0:ng]=offset+raw_array[1:N+1].reshape(ng,ng).T
b[ng,0:ng]=b[0,0:ng]
b[0:ng+1,ng]=b[0:ng+1,0]

bmin = np.amin(b)
bmax = np.amax(b)
brange = bmax - bmin
bfrac = 0.01
bmin = bmin - bfrac*brange
bmax = bmax + bfrac*brange

# Obtain contour levels for plotting the colorbars:
db = contint(bmin,bmax)
jmin = -int(-bmin/db)
jmax =  int( bmax/db)
blevels1 = np.linspace(db*(float(jmin)-0.5),db*(float(jmax)+0.5),jmax-jmin+2)

db = db/mult
jmin = -int(-bmin/db)
jmax =  int( bmax/db)
blevels1f = np.linspace(db*(float(jmin)-0.5),db*(float(jmax)+0.5),jmax-jmin+2)

# Store data for selected frame:
b[0:ng,0:ng]=offset+raw_array[frame*(N+1)+1:(frame+1)*(N+1)].reshape(ng,ng).T

# Add periodic edges:
b[ng,0:ng]=b[0,0:ng]
b[0:ng+1,ng]=b[0:ng+1,0]

#-----------------------------------
# Open and read vorticity data file:
in_file=open('zz.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()

# Set up array to contain data:
z=np.empty([ng+1,ng+1])

# Store data for selected frame:
z[0:ng,0:ng]=raw_array[frame*(N+1)+1:(frame+1)*(N+1)].reshape(ng,ng).T

# Add periodic edges:
z[ng,0:ng]=z[0,0:ng]
z[0:ng+1,ng]=z[0:ng+1,0]

# Work out the overall min/max values:
zmin = np.amin(z)
zmax = np.amax(z)
zmag = max(-zmin,zmax)
zrms = np.sqrt(np.sum(z[0:ng,0:ng]**2)/float(N))
p = 0.75
zmax = zmag**p*zrms**(1.0-p)
zmin = -zmax

# Obtain contour levels for plotting the colorbars:
dz = contint(zmin,zmax)
jmin = -int(-zmin/dz)
jmax =  int( zmax/dz)
zlevels1 = np.linspace(dz*(float(jmin)-0.5),dz*(float(jmax)+0.5),jmax-jmin+2)

dz = dz/mult
jmin = -int(-zmin/dz)
jmax =  int( zmax/dz)
zlevels1f = np.linspace(dz*(float(jmin)-0.5),dz*(float(jmax)+0.5),jmax-jmin+2)

#--------------------------------------------------------
# Set up figure:
fig, (ax1,ax2) = plt.subplots(figsize=[14,7], nrows=1, ncols=2)

extent = (-np.pi,np.pi,-np.pi,np.pi)

t = time[frame]
print(' Time t =',t)

ax1.set_xlim([-np.pi,np.pi])
ax1.set_ylim([-np.pi,np.pi])

ax2.set_xlim([-np.pi,np.pi])
ax2.set_ylim([-np.pi,np.pi])

# Customise tick values:
ax1.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax1.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax1.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax1.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)

ax2.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax2.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax2.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax2.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)

ax1.set_title('$b$ at $t = {x:.2f}$'.format(x=t), fontsize=20)
ax2.set_title('$\\zeta$ at $t = {x:.2f}$'.format(x=t), fontsize=20)

ax1.set_xlabel('$x$', fontsize=20)
ax2.set_xlabel('$x$', fontsize=20)

ax1.set_ylabel('$y$', fontsize=20)
plt.setp(ax2.get_yticklabels(), visible=False)

#---------------------------------------------------------------------
# Plot the images with a colourbar:
im1 = ax1.imshow(b,cmap=cm.seismic,vmin=bmin,vmax=bmax,extent=extent,
                 origin='lower',interpolation='bilinear')
#cs1 = ax1.contour(b, blevels1f, colors='k', extent=extent, linewidths=1)
divider = make_axes_locatable(ax1)
cax1 = divider.append_axes("right", size="4%", pad=0.1)
cbar = fig.colorbar(im1, cax=cax1, ticks=blevels1, extend='both')
cm.seismic.set_under('cyan')
cm.seismic.set_over('yellow')
#cbar.add_lines(cs1)

im2 = ax2.imshow(z,cmap=cm.seismic,vmin=zmin,vmax=zmax,extent=extent,
                 origin='lower',interpolation='bilinear')
#cs2 = ax2.contour(z, zlevels1f, colors='k', extent=extent, linewidths=1)
divider = make_axes_locatable(ax2)
cax2 = divider.append_axes("right", size="4%", pad=0.1)
cbar = fig.colorbar(im2, cax=cax2, ticks=zlevels1, extend='both')
cm.seismic.set_under('cyan')
cm.seismic.set_over('yellow')
#cbar.add_lines(cs2)

fig.subplots_adjust(wspace=0.8, hspace=0.0)

#=========================================================================
# Save image:
figfile='bz_t'+str(t)+'.pdf'
fig.savefig(figfile, format='pdf', dpi=600)
print()
print(' To view the image, type')
print()
print(' ev '+figfile)
print()
