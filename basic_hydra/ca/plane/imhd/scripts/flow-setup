#!/usr/bin/env csh

#=========================================================================#
#  Job setup script for the planar incompressible MHD class of f90 codes.
#=========================================================================#

echo
echo '---------------------------------------------------------'
echo '   The doubly-periodic single-layer quasi-geostrophic'
echo ' incompressible MHD Combined Lagrangian Advection Method'
echo '---------------------------------------------------------'

# Specify code numerical method class:
set meth="ca"
# Specify code geometry:
set geom="plane"
# Specify model equation type:
set equa="imhd"

# Ask for code version (typically OpenMP or not):
echo
echo ' Which version of the code should be used?'
echo -n ' (1) Serial, or (2) OpenMP - (default 1)? '
set version=$<
if ($version == "") set version="1"

if ($version == "1") then
   set algo="caps"
else
   set algo="omp_caps"
endif

#==========================================================================
# The following is totally generic!
set local_home=`homedir`
set hydradir=$local_home/$user/hydra/$meth/$geom/$equa

# Get output base directory:
set workdir=`workdir`
# Make the base data directory if it does not already exist:
if (!(-d $workdir)) mkdir $workdir
set workdir=$workdir/hydra
if (!(-d $workdir)) mkdir $workdir
set basedir=$workdir/$meth
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$geom
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$equa
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$algo
if (!(-d $basedir)) mkdir $basedir

set outdir=$workdir/$meth/$geom/$equa/$algo

# Assign source and binary directories:
set srcdir=$hydradir/$algo
set bindir=$hydradir/scripts

# Get the name of the computer to record in the job_info file below:
set host=`hostname | awk -F. '{print $(1)}'`

#==========================================================================
# generate a random number seed based on current time:
set second=`date +%-S`
set minute=`date +%-M`
set hour=`date +%-H`
set day=`date +%-d`
@ iseed = ( $second + ( 60 * ( $minute + 60 * ( $hour + ( 24 * $day ) ) ) ) )

# Create a temporary directory:
set tmpdir=$outdir/tmp{$iseed}
mkdir $tmpdir
cd $tmpdir

echo ' *** Job will be built in the temporary directory '
echo $tmpdir
echo

# Create a job information summary file:
touch job_info
echo ' Job created at                      ' `date` >> job_info
echo ' on                                  ' $host >> job_info
echo ' ' >> job_info

#==========================================================================
# Get the data generation routine to be used:
set dataopt="4"
echo
echo ' Choose one of the following flow initialisation methods:'
echo    ' (1) a uniform PV vortex strip, '
echo    ' (2) an elliptical vortex patch, '
echo    ' (3) a Gaussian vortex, or '
echo -n ' (4) random PV anomaly and magnetic potential fields  -  (default' $dataopt')? '
set var=$<
if ($var != "") set dataopt=$var

# Set defaults for each data generation type:
if ($dataopt == "1") then 
    # ==> Note that the maximum PV is 4*pi here <==
   set datagen = "vstrip"

    # Logical variables:
   set damping = "n"
   set tracer = "n"

    # Physical parameters:
   set lxdpi = "2"     # Domain width  L_x divided by pi
   set lydpi = "2"     # Domain height L_y divided by pi
   set kd = "0.0"      # Rossby deformation wavenumber (kd = 1/L_D)
   set bdpi = "0.0"    # beta/pi where beta is the planetary vorticity gradient
   set gamma = "2.0"   # Magnetic gamma parameter
   set rtherm="0.0"    # Thermal damping/relaxation rate
   set rekman="0.0"    # Ekman damping rate
   set esrz="0.0"      # enstrophy input rate (vorticity)
   set powz="3"        # spectral exponent (vorticity)
   set tcz="1.0"       # correlation time (vorticity)
   set k0z="12"        # peak wavenumber (vorticity)
   set esra="0.0"      # enstrophy input rate (magnetic potential)
   set powa="3"        # spectral exponent (magnetic potential)
   set tca="1.0"       # correlation time (magnetic potential)
   set k0a="12"        # peak wavenumber (magnetic potential)

    # Numerical parameters:
   set nx = "256"      # Inversion grid resolution in x (east - west)
   set nq="20"         # Number of PV contours in 0 < q < <q^2>/<|q|>
   set tgsave="0.25"   # Grid data save time increment
   set tcsave="2.5"    # Contour data save time increment
   set tsim="25.0"     # Total simulation time

else if ($dataopt == "2") then 
    # ==> Note that the maximum PV is 4*pi here <==
   set datagen = "ellipse"

    # Logical variables:
   set damping = "n"
   set tracer = "y"

    # Physical parameters:
   set lxdpi = "2"     # Domain width  L_x divided by pi
   set lydpi = "2"     # Domain height L_y divided by pi
   set kd = "0.0"      # Rossby deformation wavenumber (kd = 1/L_D)
   set bdpi = "0.0"    # beta/pi where beta is the planetary vorticity gradient
   set gamma = "2.0"   # Magnetic gamma parameter
   set rtherm="0.0"    # Thermal damping/relaxation rate
   set rekman="0.0"    # Ekman damping rate
   set esrz="0.0"      # enstrophy input rate (vorticity)
   set powz="3"        # spectral exponent (vorticity)
   set tcz="1.0"       # correlation time (vorticity)
   set k0z="12"        # peak wavenumber (vorticity)
   set esra="0.0"      # enstrophy input rate (magnetic potential)
   set powa="3"        # spectral exponent (magnetic potential)
   set tca="1.0"       # correlation time (magnetic potential)
   set k0a="12"        # peak wavenumber (magnetic potential)

    # Numerical parameters:
   set nx = "256"      # Inversion grid resolution in x (east - west)
   set nq="40"         # Number of PV contours in 0 < q < <q^2>/<|q|>
   set tgsave="0.25"   # Grid data save time increment
   set tcsave="2.5"    # Contour data save time increment
   set tsim="25.0"     # Total simulation time

else if ($dataopt == "3") then 
    # ==> Note that the maximum PV is 4*pi here <==
   set datagen = "gauss"

    # Logical variables:
   set damping = "n"
   set tracer = "y"

    # Physical parameters:
   set lxdpi = "2"     # Domain width  L_x divided by pi
   set lydpi = "2"     # Domain height L_y divided by pi
   set kd = "0.0"      # Rossby deformation wavenumber (kd = 1/L_D)
   set bdpi = "0.0"    # beta/pi where beta is the planetary vorticity gradient
   set gamma = "2.0"   # Magnetic gamma parameter
   set rtherm="0.0"    # Thermal damping/relaxation rate
   set rekman="0.0"    # Ekman damping rate
   set esrz="0.0"      # enstrophy input rate (vorticity)
   set powz="3"        # spectral exponent (vorticity)
   set tcz="1.0"       # correlation time (vorticity)
   set k0z="12"        # peak wavenumber (vorticity)
   set esra="0.0"      # enstrophy input rate (magnetic potential)
   set powa="3"        # spectral exponent (magnetic potential)
   set tca="1.0"       # correlation time (magnetic potential)
   set k0a="12"        # peak wavenumber (magnetic potential)

    # Numerical parameters:
   set nx = "256"      # Inversion grid resolution in x (east - west)
   set nq="40"         # Number of PV contours in 0 < q < <q^2>/<|q|>
   set tgsave="0.25"   # Grid data save time increment
   set tcsave="2.5"    # Contour data save time increment
   set tsim="25.0"     # Total simulation time

else if ($dataopt == "4") then 
   set datagen = "random"

    # Logical variables:
   set damping = "n"
   set tracer = "n"

    # Physical parameters:
   set lxdpi = "2"     # Domain width  L_x divided by pi
   set lydpi = "2"     # Domain height L_y divided by pi
   set kd = "0.0"      # Rossby deformation wavenumber (kd = 1/L_D)
   set bdpi = "0.0"    # beta/pi where beta is the planetary vorticity gradient
   set gamma = "0.0"   # Magnetic gamma parameter
   set rtherm="0.0"    # Thermal damping/relaxation rate
   set rekman="0.0"    # Ekman damping rate
   set esrz="0.0"      # enstrophy input rate (vorticity)
   set powz="3"        # spectral exponent (vorticity)
   set tcz="1.0"       # correlation time (vorticity)
   set k0z="8"         # peak wavenumber (vorticity)
   set esra="0.0"      # enstrophy input rate (magnetic potential)
   set powa="3"        # spectral exponent (magnetic potential)
   set tca="1.0"       # correlation time (magnetic potential)
   set k0a="8"         # peak wavenumber (magnetic potential)

    # Numerical parameters:
   set nx = "512"      # Inversion grid resolution in x (east - west)
   set nq="16"         # Number of PV contours in 0 < q < <q^2>/<|q|>
   set tgsave="0.05"   # Grid data save time increment
   set tcsave="1.0"    # Contour data save time increment
   set tsim="10.0"     # Total simulation time

else 
   echo ' Not a valid choice - exiting...'
   /bin/rm -r $tmpdir  
   exit(-1)
endif

#==========================================================================
# Set fixed constants:
set pi=3.14159265358979323846

#==========================================================================
# Choose main physical parameters:
echo
echo ' We take the width of the domain (in x) to be '$lxdpi'*pi.'
echo -n ' Width of the domain in y divided by pi, L_y/pi (default' $lydpi')? '
set var=$<
if ($var != "") set lydpi=$var
set ellx=`echo "$lxdpi * $pi" | bc -l`
set elly=`echo "$lydpi * $pi" | bc -l`
set ymin=`echo "-$elly / 2" | bc -l`
echo ' Width of the domain in x, L_x:      ' $lxdpi"*pi" >> job_info
echo ' Width of the domain in y, L_y:      ' $lydpi"*pi" >> job_info

echo
echo -n ' Baroclinic Rossby deformation wavenumber, kd (default' $kd')? '
set var=$<
if ($var != "") set kd=$var
echo ' Rossby def. wavenumber, k_D:        ' $kd >> job_info

echo -n ' Planetary vorticity gradient divided by pi, beta/pi (default' $bdpi')? '
set var=$<
if ($var != "") set bdpi=$var
set beta=`echo "$bdpi * $pi" | bc -l`
echo ' Planetary vorticity gradient, beta: ' $bdpi"*pi" >> job_info
echo ' ' >> job_info

echo
echo -n ' Add tracer contours to monitor circulation (y/n, default' $tracer')? '
set var=$<
if ($var != "") set tracer=$var
if ($tracer == "n") then
   set tralog=".false."
else
   set tralog=".true."
   echo ' ' >> job_info
   echo ' Monitoring circulation with tracer contours' >> job_info
endif

#-------------------------------------------------------------------
# Set forcing parameters:
echo
echo ' We assume a forcing spectrum of the form'
echo '   c * k^{2p-1} * exp[-2*(k/k_0)^2]'
echo ' for both the PV anomaly q and the magnetic potential A.'

echo
echo -n ' enstrophy input rate (vorticity, default' $esrz')? '
set var=$<
if ($var != "") set esrz=$var

if ($esrz != "0.0") then
   echo -n ' spectral exponent, p (default' $powz')? '
   set var=$<
   if ($var != "") set powz=$var

   echo -n ' peak wavenumber, k_0 (default' $k0z')? '
   set var=$<
   if ($var != "") set k0z=$var

   echo -n ' correlation time (default' $tcz')? '
   set var=$<
   if ($var != "") set tcz=$var

   echo ' ' >> job_info
   echo ' enstrophy input rate (vorticity):   ' $esrz >> job_info
   echo ' spectral exponent:                  ' $powz >> job_info
   echo ' peak wavenumber:                    ' $k0z >> job_info
   echo ' correlation time:                   ' $tcz >> job_info
endif

echo
echo -n ' enstrophy input rate (magnetic potential, default' $esra')? '
set var=$<
if ($var != "") set esra=$var

if ($esra != "0.0") then
   echo -n ' spectral exponent, p (default' $powa')? '
   set var=$<
   if ($var != "") set powa=$var

   echo -n ' peak wavenumber, k_0 (default' $k0a')? '
   set var=$<
   if ($var != "") set k0a=$var

   echo -n ' correlation time (default' $tca')? '
   set var=$<
   if ($var != "") set tca=$var

   echo ' ' >> job_info
   echo ' enstrophy input rate (mag. pot.):   ' $esra >> job_info
   echo ' spectral exponent:                  ' $powa >> job_info
   echo ' peak wavenumber:                    ' $k0a >> job_info
   echo ' correlation time:                   ' $tca >> job_info
endif

#-------------------------------------------------------------------
# Set thermal and Ekman damping:
if ($damping == "y") then 
   echo -n ' Thermal damping rate, r_th (default' $rtherm')? '
   set var=$<
   if ($var != "") set rtherm=$var

   echo -n '  Ekman  damping rate, r_ek (default' $rekman')? '
   set var=$<
   if ($var != "") set rekman=$var
   
   echo ' ' >> job_info
   echo ' Thermal damping rate:               ' $rtherm >> job_info
   echo ' Ekman damping rate:                 ' $rekman >> job_info
endif

#==========================================================================
# Choose numerical parameters:
echo
echo    ' ----------------------------------------------------'
echo
echo -n ' Grid resolution in x (default' $nx')? '
set var=$<
if ($var != "") set nx=$var
echo ' Inversion grid resolution in x:     ' $nx >> job_info

# Grid scale:
set glx=`echo "scale=10; $ellx / $nx" | bc -l`

# Set y resolution so that dx = dy (as closely as possible):
set fny=`echo "($nx*$lydpi)/$lxdpi + 0.5" | bc -l`
set ny=${fny:r}
echo -n ' Grid resolution in y (default' $ny')? '
set var=$<
if ($var != "") set ny=$var
echo ' Inversion grid resolution in y:     ' $ny >> job_info

echo -n ' No. of PV jumps to represent the PV variation (default' $nq')? '
set var=$<
if ($var != "") set nq=$var
echo ' Number of jumps to represent PV, nq:' $nq >> job_info

# Maximum total number of contour nodes:
@ npm = ( 78125 * ( $nx / 16 ) * ( $ny / 16 ) )
echo -n ' Maximum number of contour nodes (default' $npm')? '
set var=$<
if ($var != "") set npm=$var
echo ' Maximum number of contour nodes:    ' $npm >> job_info

echo
echo -n ' Time interval between gridded data saves (default' $tgsave')? '
set var=$<
if ($var != "") set tgsave=$var
echo ' Time interval between data saves:   ' $tgsave >> job_info

echo -n ' Time interval between contour data saves (default' $tcsave')? '
set var=$<
if ($var != "") set tcsave=$var
echo ' Time interval between contour saves:' $tcsave >> job_info

echo -n ' Total simulation time (default' $tsim')? '
set var=$<
if ($var != "") set tsim=$var
echo ' Total simulation time:              ' $tsim >> job_info
echo ' ' >> job_info

# Use default values for hyperviscosity (applied to residual PV only):
set nnu=3
set cdamp="2.0"

echo ' ' >> job_info
echo ' ***Lap^'{$nnu} 'Hyperdiffusion on residual PV ' >> job_info
echo ' C*|zeta|_rms = damping rate for k = sqrt(nx*ny)/2 ' >> job_info
echo ' Damping coefficient, C:             ' $cdamp >> job_info

#-------------------------------------------------------------------
# Set magnetic field parameters using defaults assumed for the 
# maximum PV, q0, and characteristic horizontal scale, radius:
set q0=`echo "scale=12; 4 * $pi" | bc -l`
# With q0 = 4*pi, one unit of time is a vortex rotation period
if ($dataopt == "4") then 
   set radius=`echo "scale=12; $pi / 8" | bc -l` # Assumes k_0=8 in random.f90
   set dlen_nd="0.5" # This is the diffusion length/dx
else
   set radius=`echo "scale=12; 5 * $pi / 32" | bc -l`
   set dlen_nd="0.5" # This is the diffusion length/dx
   # With radius = 5*pi/32, and a diffusion length of dx/2, delta = 6.4/ng
endif
set u0=`echo "scale=12; $q0*$radius/2" | bc -l`
echo ' ' >> job_info
echo ' Characteristic flow speed, U_0:     ' $u0 >> job_info
echo ' Characteristic length, L:           ' $radius >> job_info
echo ' Maximum vorticity, q_0:             ' $q0 >> job_info

# Compute diffusion length:
set dlen=`echo "scale=6; $dlen_nd*$glx" | bc -l`
# Compute non-dimensional diffusion length, delta = dlen/radius:
set delta=`echo "scale=6; $dlen/$radius" | bc -l`
# Compute diffusivity, eta:
set eta=`echo "scale=6; $q0*$dlen*$dlen" | bc -l`

echo
echo ' Using a diffusion length dlen = sqrt{eta/q_0} =' $dlen_nd'*dx where'
echo ' dx is the grid length.  This implies eta =' $eta

echo
if ($dataopt == "4") then
   set b0="0.0"
   echo -n ' Mean magnetic field, B_0 (default' $b0')? '
   set var=$<
   if ($var != "") set b0=$var
   # Compute gamma = (B_0/U_0)/delta:
   set gamma=`echo "scale=10; $b0/($u0*$delta)" | bc -l`
else
   echo -n ' gamma = (B_0/U_0)/delta  (default' $gamma')? '
   set var=$<
   if ($var != "") set gamma=$var
   # Compute mean magnetic field strength, B_0:
   set b0=`echo "scale=10; $gamma*$u0*$delta" | bc -l`
endif
set rm=`echo "scale=4; $u0*$radius / $eta" | bc -l`

echo
echo ' ==> eta =' $eta '  B_0 =' $b0 '  and  Rm =' $rm

echo ' ' >> job_info
echo ' Mag. diffusion length/dx, dlen/dx:  ' $dlen_nd >> job_info
echo '                dlen/R, delta:       ' $delta >> job_info
echo '       (B_0/U_0)/delta, gamma:       ' $gamma >> job_info
echo ' Magnetic diffusivity, eta:          ' $eta >> job_info
echo ' Mean magnetic field in x, B_0:      ' $b0 >> job_info
echo ' Magnetic Reynolds number, U_0*R/eta:' $rm >> job_info

echo
if ($dataopt != "4") then 
   echo ' The simulation starts with zero magnetic potential A.'
endif

#============================================================
# Build parameter file with cpp and make all codes:

# Put all these dimensions into the dimens file needed for compilation:
mkdir src
cd src
cp $srcdir/* .
cp -r $hydradir/init .
cp -r $hydradir/post .

echo 
echo " Compiling source files....."
echo " -----------------------------------------------------------------------"

# Use C pre-processor to put chosen parameters $copts into parameters.f90
set copts="-DN_X=$nx -DN_Y=$ny -DN_CONTQ=$nq -DNPT_MAX=$npm -DT_SIM={$tsim}d0 -DT_GSAVE={$tgsave}d0 -DT_CSAVE={$tcsave}d0 -DL_X={$ellx}d0 -DL_Y={$elly}d0 -DK_D={$kd}d0 -DPV_GRAD={$beta}d0 -DB_0={$b0}d0 -DMAG_DIFF={$eta}d0 -DR_THERM={$rtherm}d0 -DR_EKMAN={$rekman}d0 -DE_SRZ={$esrz}d0 -DPOW_Z=$powz -DK0_Z=$k0z -DTC_Z={$tcz}d0 -DE_SRA={$esra}d0 -DPOW_A=$powa -DK0_A=$k0a -DTC_A={$tca}d0 -DI_SEED={$iseed} -DT_RACER=$tralog -DC_DAMP={$cdamp}d0 -DPOW_HYPER=$nnu"
precomp $copts parameters.f90

# Compile all codes and move sources to sub-directory:
if ($bdpi == "0.0") then
   # No beta effect; use congen.f90 in the compilation:
   make caps setup $datagen proxy_post_all install
else
   # beta .ne. 0; use econgen.f90:
   make ecaps setup $datagen proxy_post_all install
endif

cd ..
echo " -----------------------------------------------------------------------"
echo 

#============================================================
# Execute the data generation script:
$bindir/$datagen

# Copy useful scripts to job directory:
/bin/cp $bindir/spec_view .
/bin/cp $bindir/zonalview .
/bin/cp $bindir/diagplot.py .

#==========================================================================
# Create a directory named after the data generation script:
cd ..
if (!(-d $datagen)) mkdir $datagen
cd $datagen

# Set the job directory name (will be appended by 001, 002 etc...):
set basejobdir=nx{$nx}
if ($ny     !=   $nx) set basejobdir={$basejobdir}ny{$ny}
set basejobdir={$basejobdir}g{$gamma}
if ($kd     != "0.0") set basejobdir={$basejobdir}kd{$kd}
if ($bdpi   != "0.0") set basejobdir={$basejobdir}bdpi{$bdpi}
if ($rtherm != "0.0") set basejobdir={$basejobdir}rt{$rtherm}
if ($rekman != "0.0") set basejobdir={$basejobdir}re{$rekman}
if ($esrz != "0.0") set basejobdir={$basejobdir}esrz{$esrz}
if ($esra != "0.0") set basejobdir={$basejobdir}esra{$esrz}

echo
echo -n ' Job directory name (default '{$basejobdir}')? '
set var=$<
if ($var != "") set basejobdir=$var

# work out the last run which has been performed:
# First make a bogus empty directory so this works!
mkdir {$basejobdir}r000
set last_run = `/bin/ls -d {$basejobdir}r??? | tail -c 4 | head -c 3`
rmdir {$basejobdir}r000

@ next_run = ( $last_run + 1 )
@ p1 = ( $next_run / 100 )
@ jr = ( $next_run - ( 100 * $p1 ) )
@ p2 = ( $jr / 10 )
@ p3 = ( $jr - ( 10 * $p2 ) )
set pind={$p1}{$p2}{$p3}

set jobdir={$basejobdir}r{$pind}

#=============================================================
# Lastly move all data to desired job directory:

# Move temporary directory to job directory:
/bin/mv $tmpdir $jobdir
cd $jobdir
set datadir=`pwd`

# Copy handy script for viewing wavenumber spectra:
/bin/cp $bindir/sv .
# Copy handy scripts for viewing fields and plotting diagnostics:
/bin/cp $bindir/dv .
/bin/cp $bindir/ddv .
/bin/cp $bindir/pv_plot.py .
/bin/cp $bindir/penergy.py .
/bin/cp $bindir/pnorms.py .
/bin/cp $bindir/pusqbsq.py .

echo ' ' >> job_info
echo ' Job directory:' >> job_info
echo $datadir >> job_info

echo
echo ' To set the job running and monitor progress, type'
echo 'cd' $datadir
echo 'bat log caps'
echo 'tail -f log'
echo
