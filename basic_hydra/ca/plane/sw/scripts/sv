#!/usr/bin/env python

# This script plots spectra for a chosen field, optionally including
# the balanced and imbalanced components (if ispectra is run first).

#=====perform the various generic imports========
import warnings
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.colors as clrs
# Set default plot save resolution to a large value:
mpl.rcParams['savefig.dpi'] = 200
# Set label size:
mpl.rcParams['xtick.labelsize'] = 30
mpl.rcParams['ytick.labelsize'] = 30
mpl.rcParams['axes.linewidth'] = 3
warnings.simplefilter("ignore",DeprecationWarning)

#========================================
#=====----------Main code----------======
#========================================

print()
print('   ---------------------------------------------')
print('   | Plots 1d power spectra for a chosen field |')
print('   ---------------------------------------------')
print()
print(' Choose one of the following:')
print()
print('   (1)  relative vorticity, zeta')
print('   (2)  velocity divergence, delta')
print('   (3)  linearised acceleration divergence, gamma')
print('   (4)  gamma_tilde = gamma - 2J(u,v)')
print('   (5)  dimensionless height anomaly, h_tilde, or')
print('   (6)  vertically-integrated pressure P')
print()
opt_in = input(' Option (default 2)? ')
option = int(opt_in or 2)
print()
print(' Include balanced & imbalanced spectra (need to run ispectra first)')
bal_in = input(' yes (y) or no (n) --- default y? ')
bal = str(bal_in or 'y')

if option==1:
   file1='zspec.asc'
   labely='$\log_{10}\,|\hat{\\zeta}|^2$'
   if bal=='y':
      file2='zbspec.asc'
      file3='zispec.asc'
      label1='${\\zeta}$'
      label2='${\\zeta}_{\mathsf{b}}$'
      label3='${\\zeta}_{\mathsf{i}}$'
elif option==2:
   file1='dspec.asc'
   labely='$\log_{10}\,|\hat{\\delta}|^2$'
   if bal=='y':
      file2='dbspec.asc'
      file3='dispec.asc'
      label1='${\\delta}$'
      label2='${\\delta}_{\mathsf{b}}$'
      label3='${\\delta}_{\mathsf{i}}$'
elif option==3:
   file1='gspec.asc'
   labely='$\log_{10}\,|\hat{\\gamma}|^2$'
   if bal=='y':
      file2='gbspec.asc'
      file3='gispec.asc'
      label1='${\\gamma}$'
      label2='${\\gamma}_{\mathsf{b}}$'
      label3='${\\gamma}_{\mathsf{i}}$'
elif option==4:
   file1='tspec.asc'
   labely='$\log_{10}\,|\hat{\\tilde\\gamma}|^2$'
   if bal=='y':
      file2='tbspec.asc'
      file3='tispec.asc'
      label1='${\\tilde\\gamma}$'
      label2='${\\tilde\\gamma}_{\mathsf{b}}$'
      label3='${\\tilde\\gamma}_{\mathsf{i}}$'
elif option==5:
   file1='hspec.asc'
   labely='$\log_{10}\,|\hat{h}|^2$'
   if bal=='y':
      file2='hbspec.asc'
      file3='hispec.asc'
      label1='${h}$'
      label2='${h}_{\mathsf{b}}$'
      label3='${h}_{\mathsf{i}}$'
else:
   file1='pspec.asc'
   labely='$\log_{10}\,|\hat{P}|^2$'
   if bal=='y':
      file2='pbspec.asc'
      file3='pispec.asc'
      label1='${P}$'
      label2='${P}_{\mathsf{b}}$'
      label3='${P}_{\mathsf{i}}$'

# Open input file(s):
in_file1=open('spectra/'+file1,'r')
# Read the first header line to get kmax:
first_line=in_file1.readline()
kmax=int(first_line.split()[-1])
in_file1.seek(0)

if bal=='y':
   in_file2=open('spectra/'+file2,'r')
   first_line=in_file2.readline()
   in_file2.seek(0)
   in_file3=open('spectra/'+file3,'r')
   first_line=in_file3.readline()
   in_file3.seek(0)

# Plot only to the de-aliasing cutoff:
kc=int(2.0*float(kmax)/3.0)
print()
print(' Plotting up to the de-aliasing wavenumber kc = %i' %kc)
xmin=0.0
xmax=0.1*int(10.0*np.log10(float(kc))+1.0)

nx=kc

# Read in the full data to a 1d array and close input file:
raw_data1 = np.fromfile(file=in_file1,dtype=float,sep='\n')
in_file1.close()
nframes1 = int(len(raw_data1)/(2*kmax+2))  
if bal=='y':
   raw_data2 = np.fromfile(file=in_file2,dtype=float,sep='\n')
   in_file2.close()
   nframes2 = int(len(raw_data2)/(2*kmax+2))  
   raw_data3 = np.fromfile(file=in_file3,dtype=float,sep='\n')
   in_file3.close()
   nframes3 = int(len(raw_data3)/(2*kmax+2))  
   nframes = min(nframes1,nframes2,nframes3)
else:
   nframes = nframes1

# Set the number of frames:
print()
print(' Number of time frames found: %i' %nframes)
print()

# Shape the data array(s) for plotting and work out
# min/max values over all time:
frames=range(0,nframes1)
time=[raw_data1[i*(2*kmax+2)] for i in frames]
tim_eles = [i*(2*kmax+2)+j for i in frames for j in range(2)]
shaped_data = np.delete(raw_data1,tim_eles)[0:(2*kmax+2)*nframes1].reshape((nframes1,kmax,2))
k=np.zeros((nframes1,nx))
s1=np.zeros((nframes1,nx))
smin=1000.0
smax=-1000.0
for i in frames:
   k[i,:]=shaped_data[i].transpose()[0][0:nx]
   s1[i,:]=shaped_data[i].transpose()[1][0:nx]
   smin=min(smin,np.amin(s1[i,:]))
   smax=max(smax,np.amax(s1[i,:]))

if bal=='y':
   frames=range(0,nframes2)
   tim_eles = [i*(2*kmax+2)+j for i in frames for j in range(2)]
   shaped_data = np.delete(raw_data2,tim_eles)[0:(2*kmax+2)*nframes2].reshape((nframes2,kmax,2))
   s2=np.zeros((nframes2,nx))
   for i in frames:
      s2[i,:]=shaped_data[i].transpose()[1][0:nx]
      smin=min(smin,np.amin(s2[i,:]))
      smax=max(smax,np.amax(s2[i,:]))
   frames=range(0,nframes3)
   tim_eles = [i*(2*kmax+2)+j for i in frames for j in range(2)]
   shaped_data = np.delete(raw_data3,tim_eles)[0:(2*kmax+2)*nframes3].reshape((nframes3,kmax,2))
   s3=np.zeros((nframes3,nx))
   for i in frames:
      s3[i,:]=shaped_data[i].transpose()[1][0:nx]
      smin=min(smin,np.amin(s3[i,:]))
      smax=max(smax,np.amax(s3[i,:]))

smin=0.5*int(2.0*(smin+1000.0))-1000.0
smax=0.5*int(2.0*(smax+1000.0)+1.0)-1000.0

ymax_in = input(' Maximum log_10(spectrum) to plot (default '+str(smax)+')? ')
ymax = float(ymax_in or smax)

smin=smax-10.0
ymin_in = input(' Minimum log_10(spectrum) to plot (default '+str(smin)+')? ')
ymin = float(ymin_in or smin)

print()

#======================================================================
# Grab the correct sub-array for plotting (ic is the current frame):
global ic 
ic = 0

# Initiate a plotting window and plot relevant data into it:
fig = plt.figure(1,figsize=[10,10])
fig.subplots_adjust(bottom=0.2,left=0.2)
ax = fig.add_subplot(111)
if bal=='y':
   im1 = ax.plot(k[ic],s1[ic],'k-',lw=2,label=label1)
   im2 = ax.plot(k[ic],s2[ic],'b-',lw=2,label=label2)
   im3 = ax.plot(k[ic],s3[ic],'r-',lw=2,label=label3)
   ax.legend(loc='lower center',prop={'size':20}, shadow=True)
else:
   im1 = ax.plot(k[ic],s1[ic],'k-',lw=2)

# Set plot title, legend and limits of the plot:
ax.set_title('$t =$'+str('%.2f'%time[ic]), fontsize=30)
ax.set_xlabel('$\log_{10}\,k$', fontsize=30)
ax.set_ylabel(labely, fontsize=30)
ax.tick_params(length=10, width=3)
ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

def on_press(event):
  # Routine to deal with re-plotting the window on keypress. 
  # The keys -/= (ie. -/+ without the shift key) cycle through frames 
  # forward and backwards.
  global ic
  if event.key=='=':
    axes=event.canvas.figure.get_axes()[0]
    ic = (ic+1+nframes) % nframes
    xlim=axes.get_xlim()
    ylim=axes.get_ylim()

    # Clear the axes for replot:
    axes.clear()

    # Replot the relevant data:
    if bal=='y':
      axes.plot(k[ic],s1[ic],'k-',lw=2,label=label1)
      axes.plot(k[ic],s2[ic],'b-',lw=2,label=label2)
      axes.plot(k[ic],s3[ic],'r-',lw=2,label=label3)
      axes.legend(loc='lower center',prop={'size':20}, shadow=True)
    else:
      axes.plot(k[ic],s1[ic],'k-',lw=2)

    # Set the title, legend and plot limits:
    axes.set_title('$t =$'+str('%.2f'%time[ic]), fontsize=30)
    axes.set_xlabel('$\log_{10}\,k$', fontsize=30)
    axes.set_ylabel(labely, fontsize=30)
    axes.tick_params(length=10, width=3)
    axes.set_xlim(xlim)  
    axes.set_ylim(ylim)
    plt.draw()

  if event.key=='-':
    axes=event.canvas.figure.get_axes()[0]
    ic = (ic-1+nframes) % nframes
    xlim=axes.get_xlim()
    ylim=axes.get_ylim()

    # Clear the axes for replot:
    axes.clear()

    # Replot the relevant data:
    if bal=='y':
      axes.plot(k[ic],s1[ic],'k-',lw=2,label=label1)
      axes.plot(k[ic],s2[ic],'b-',lw=2,label=label2)
      axes.plot(k[ic],s3[ic],'r-',lw=2,label=label3)
      axes.legend(loc='lower center',prop={'size':20}, shadow=True)
    else:
      axes.plot(k[ic],s1[ic],'k-',lw=2)

    # Set the title, legend and plot limits:
    axes.set_title('$t =$'+str('%.2f'%time[ic]), fontsize=30)
    axes.set_xlabel('$\log_{10}\,k$', fontsize=30)
    axes.set_ylabel(labely, fontsize=30)
    axes.tick_params(length=10, width=3)
    axes.set_xlim(xlim)  
    axes.set_ylim(ylim)

    # Finally redraw the plot:
    plt.draw()

# Begin the plot and link keypress events to the above handler:
cid=fig.canvas.mpl_connect('key_press_event',on_press)
plt.show()
