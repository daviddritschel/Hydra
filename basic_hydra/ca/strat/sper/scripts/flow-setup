#!/usr/bin/env csh

#=========================================================================#
#         Job setup script for the strat aper class of f90 codes
#=========================================================================#

echo
echo '--------------------------------------------------------'
echo '           The singly-periodic stratified flow'
echo '          Combined Lagrangian Advection Method'
echo '--------------------------------------------------------'

# Specify code numerical method class:
set meth="ca"
# Specify code geometry:
set geom="strat"
# Specify model equation type:
set equa="sper"

# Ask for inclusion of bottom topography:
echo
echo -n ' Include bottom topography (0 = no, 1 = yes; default: 0)? '
set topogr=$<
if ($topogr == "") set topogr="0"

# Work out code directory:
if ($topogr != "1") then
   set algo="caps"
else
   set algo="topo_caps"
endif

#==========================================================================
# The following is totally generic!
set local_home=`homedir`
set hydradir=$local_home/$user/hydra/$meth/$geom/$equa

# Get output base directory:
set basedir=`workdir`
# Make the base data directory if it does not already exist:
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/hydra
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$meth
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$geom
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$equa
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$algo
if (!(-d $basedir)) mkdir $basedir

set outdir=$basedir

# Assign source and binary directories:
set srcdir=$hydradir/$algo
set bindir=$hydradir/scripts

# Get the name of the computer to record in the job_info file below:
set host=`hostname | awk -F. '{print $(1)}'`

#==========================================================================
# Generate a random number seed based on current time:
set second=`date +%-S`
set minute=`date +%-M`
set hour=`date +%-H`
set day=`date +%-d`
@ iseed = ( $second + ( 60 * ( $minute + 60 * ( $hour + ( 24 * $day ) ) ) ) )

# Create a temporary directory:
set tmpdir=$outdir/tmp{$iseed}
mkdir $tmpdir
cd $tmpdir

echo
echo ' *** Job will be built in the temporary directory '
echo $tmpdir

# Copy codes into various subdirectories for compilation below:
mkdir src
cd src
/bin/cp $srcdir/* .
/bin/cp -r $hydradir/init .
#/bin/cp -r $hydradir/post .

# Create a job information summary file:
touch job_info
echo ' Job created at                      ' `date` >> job_info
echo ' on                                  ' $host >> job_info
echo ' ' >> job_info

#==========================================================================
# Ask for the data generation routine to be used:
echo
echo ' Choose one of the following flow initialisation methods:'
echo '    (1) a modon or several modons (a semi-circular vortex),'
echo '    (2) a slug (a semi-elliptical buoyancy anomaly),'
echo '    (3) pre-existing data files containing buoyancy and vorticity, or'
if ($topogr == "1") then
   echo '    (4) a tidal flow initially at rest.'
   echo
   echo -n ' Option (default 4)? '
   set dataopt=$<
   if ($dataopt == "") set dataopt="4"
else
   echo
   echo -n ' Option (default 1)? '
   set dataopt=$<
   if ($dataopt == "") set dataopt="1"
endif

if ($dataopt == "1") then 
   set datagen = "modon"
else if ($dataopt == "2") then 
   set datagen = "slug"
else if ($dataopt == "3") then 
   set datagen = "diy"
else if ($dataopt == "4") then 
   set datagen = "tide"
else 
   echo ' Not a valid choice - exiting...'
   /bin/rm -r $tmpdir  
   exit(-1)
endif

#==========================================================================
# Select physical and numerical parameters for compilation:

# Set generic defaults:
# ---------------------
set uref = "0.0"      # Reference translation velocity 
set ncontz="20"       # Number of contours used to represent char. vorticity
set ncontb="100"      # Number of contours used to represent buoyancy
set nnu="3"           # Hyperviscous power
set prediss="100.0"   # Damping rate in highest resolved wavenumber

set ellxp = "8.0"     # Domain width in x direction
set ymin = "0.0"      # Minimum y coordinate (lower boundary)
set ymax = "1.0"      # Maximum y coordinate (upper boundary)

set nx = "512"        # Inversion grid resolution in x
set ny = "64"         # Inversion grid resolution in y
set tgsave="1.0"      # Grid data save time increment
set tcsave="10.0"     # Contour data save time increment
set tsim="100.0"      # Total simulation time

if ($dataopt == "1") then
   # For the modon case, use different defaults depending on the
   # experiment chosen:
   echo ' Choose one of the following experiments:'
   echo ' 1 ( 6x3,  512x256) t= 40 : single balanced vortex'
   echo ' 2 ( 6x3,  512x256) t= 40 : single balanced vortex but without sign changes'
   echo ' 3 ( 6x3,  512x256) t= 40 : vortex with b and zeta fields out of balance'
   echo ' 4 (12x3, 1024x256) t= 60 : colliding balanced vortices, m != 0'
   echo ' 5 (12x3, 1024x256) t= 60 : colliding balanced vortices, m = 0'
   echo ' 6 ( 6x3,  512x256) t= 40 : single "shielded" vortex (h > J1 root)'
   echo ' 7 (12x3, 1024x256) t=120 : chasing balanced vortices, m != 0'
   echo
   set expt="1"
   echo -n ' Choice (default 1)? '
   set var=$<
   if ($var != "") set expt=$var

   echo $expt > ../in_$datagen

   set ymax = "3.0"       # Domain width in y direction
   set ny = "256"         # Inversion grid resolution in y

   if (($expt == "1") || ($expt == "2") || ($expt == "3") || ($expt == "6")) then
      set ellxp = "6.0"     # Domain width in x direction
      set nx = "512"        # Inversion grid resolution in x
      set tsim="40.0"       # Total simulation time
   else
      set ellxp = "12.0"    # Domain width in x direction
      set nx = "1024"       # Inversion grid resolution in x
      set tsim="60.0"       # Total simulation time
   endif

   if ($expt == "7") then
      set tsim="120.0"      # Total simulation time
   endif
endif

# Choose main physical parameters (or keep default values set above):
# -------------------------------------------------------------------
echo
echo -n ' Domain width, L_x (default' $ellxp')? '
set var=$<
if ($var != "") set ellxp=$var
echo ' Domain width, L_x:                  ' $ellxp >> job_info

echo -n ' Height of the lower boundary, y_min (default' $ymin')? '
set var=$<
if ($var != "") set ymin=$var
echo ' Height of the lower boundary, y_min:' $ymin >> job_info

echo -n ' Height of the upper boundary, y_max (default' $ymax')? '
set var=$<
if ($var != "") set ymax=$var
echo ' Height of the upper boundary, y_max:' $ymax >> job_info

echo
echo -n ' Grid resolution in x (default' $nx')? '
set var=$<
if ($var != "") set nx=$var
echo ' Inversion grid resolution in x:     ' $nx >> job_info

echo -n ' Grid resolution in y (default' $ny')? '
set var=$<
if ($var != "") set ny=$var
echo ' Inversion grid resolution in y:     ' $ny >> job_info

#echo -n ' No. of Vorticity jumps to represent (default' $ncontz')? '
#set var=$<
#if ($var != "") set ncontz=$var
echo ' Number of jumps to represent zeta:  ' $ncontz >> job_info

#echo -n ' No. of Buoyancy jumps to represent (default' $ncontb')? '
#set var=$<
#if ($var != "") set ncontb=$var
echo ' Number of jumps to represent b:     ' $ncontb >> job_info

echo
echo -n ' Time interval between gridded data saves (default' $tgsave')? '
set var=$<
if ($var != "") set tgsave=$var
echo ' Time interval between data saves:   ' $tgsave >> job_info

echo -n ' Time interval between contour data saves (default' $tcsave')? '
set var=$<
if ($var != "") set tcsave=$var
echo ' Time interval between contour saves:' $tcsave >> job_info

echo -n ' Total simulation time (default' $tsim')? '
set var=$<
if ($var != "") set tsim=$var
echo ' Total simulation time:              ' $tsim >> job_info
echo ' ' >> job_info

#==========================================================================
# For topography, additionally compute the conformal map of the domain:

if ($topogr == "1") then
    # First pass parameters needed to compile and run conform.f90:
   set copts="-DN_X=$nx -DN_Y=$ny -DL_X={$ellxp}d0 -DY_MIN={$ymin}d0 -DY_MAX={$ymax}d0"
   precomp $copts conform.f90

    # Location of FFT library needed in compilation:
   set b_fft = $local_home/$user/hydra/lib/stafft
   set fft_lib = "$b_fft/stafft.f90 $b_fft/sta2dfft.f90 $b_fft/deriv1d.f90"

   echo
   echo ' compiling conform.f90 ...'

    # Compile code (using gfortran):
   gfortran -O3 $fft_lib conform.f90 -o conform 

    # Ask for shape of topography then run code to set up conformal map:
   set atop=0.2          # Default maximum amplitude of the topography
   set btop=4.0          # Default inverse square width of the topography
   set ctop=0.0          # Default x offset
   echo
   echo ' We take the topography to be of the form'
   echo '       h(x) = A*exp(-b*(x-c)^2)'
   echo ' [note: the domain is centred at x = 0.]'
   echo
   echo -n ' Amplitude, A (default' $atop')? '
   set var=$<
   if ($var != "") set atop=$var
   echo -n ' Inverse square width, b (default' $btop')? '
   set var=$<
   if ($var != "") set btop=$var
   echo -n ' Offset, c (default' $ctop')? '
   set var=$<
   if ($var != "") set ctop=$var

    # Create input file for conform:
   echo $atop $btop $ctop > in_conform

    # Run conform to obtain shape of topography in conformal domain 
    # (in hh.asc) as well as the width of the conformal domain (ellx):
   conform < in_conform > out_conform

    # Move the file containing X(x,y) and Y(x,y) down one directory:
   mv coords.r8 ..

    # Move also the file containing h(x) in the conformal domain:
   mv hh.asc ..

    # Pull off ellx from output:
   set ellx=`tail -1 out_conform`
   echo ' Note: the width of the conformal domain =' $ellx
   echo ' Conformal domain width, l_x:        ' $ellx >> job_info

    # Remove the executable (not needed any longer):
   /bin/rm conform in_conform out_conform

   if ($dataopt == "4") then
      # Ask for additional parameters associated with the tide:
     set utmax=0.5        # Maximum x velocity associated with the tide
     set ttide=32.0       # Tidal period
     echo
     echo ' We consider a tidal flow of maximum speed U_max having a'
     echo ' period of T_tide.'
     echo
     echo -n ' U_max (default' $utmax')? ' 
     set var=$<
     if ($var != "") set utmax=$var
     echo ' Maximum tidal flow speed:           ' $utmax >> job_info
     echo -n ' T_tide (default' $ttide')? ' 
     set var=$<
     if ($var != "") set ttide=$var
     echo ' Tidal period:                       ' $ttide >> job_info

      # Additional compiler options needed below:
     set copts3="-DLT_X={$ellx}d0 -DUT_MAX={$utmax}d0 -DT_TIDE={$ttide}d0"

   else

     set copts3="-DLT_X={$ellx}d0 -DUT_MAX=0.d0 -DT_TIDE=1.d0"

   endif

else

   set copts3=""

endif

#==========================================================================
# Build parameter file with cpp and make all codes:

echo 
echo " Compiling source files....."
echo " -----------------------------------------------------------------------"

# Use C pre-processor to put chosen parameters $copts into parameters.f90
set copts1="-DN_X=$nx -DN_Y=$ny -DN_CONTZ=$ncontz -DN_CONTB=$ncontb -DT_SIM={$tsim}d0 -DT_GSAVE={$tgsave}d0 -DT_CSAVE={$tcsave}d0"
set copts2="-DL_X={$ellxp}d0 -DY_MIN={$ymin}d0 -DY_MAX={$ymax}d0 -DU_REF={$uref}d0 -DN_NU={$nnu} -DPRE_DISS={$prediss}d0"
set copts=`echo $copts1 $copts2 $copts3`
precomp $copts parameters.f90

# Compile all codes and move sources to sub-directory:
#make $algo setup $datagen proxy_post_all install clean
make $algo setup $datagen install clean

cd ..
echo " -----------------------------------------------------------------------"
echo 

#============================================================
# Execute the data generation script:
if ($dataopt == "1") then
   # For the modon case, use special setting:
   $bindir/$datagen < in_$datagen
else
   $bindir/$datagen
endif

# Copy useful scripts to job directory:
/bin/cp $bindir/dv .
/bin/cp $bindir/sv .
/bin/cp $bindir/topoview .

#==========================================================================
# Create a directory named after the data generation script:
cd ..
if (!(-d $datagen)) mkdir $datagen
cd $datagen

# Set the job directory name (will be appended by 001, 002 etc...):
set basejobdir=nx{$nx}ny{$ny}
echo
echo -n ' Job directory name (default '{$basejobdir}')? '
set var=$<
if ($var != "") set basejobdir=$var

# work out the last run which has been performed:
# First make a bogus empty directory so this works!
mkdir {$basejobdir}r000
set last_run = `/bin/ls -d {$basejobdir}r??? | tail -c 4 | head -c 3`
rmdir {$basejobdir}r000

@ next_run = ( $last_run + 1 )
@ p1 = ( $next_run / 100 )
@ jr = ( $next_run - ( 100 * $p1 ) )
@ p2 = ( $jr / 10 )
@ p3 = ( $jr - ( 10 * $p2 ) )
set pind={$p1}{$p2}{$p3}

set jobdir={$basejobdir}r{$pind}

#=============================================================
# Lastly move all data to desired job directory:

# Move temporary directory to job directory:
mv $tmpdir $jobdir
cd $jobdir
set datadir=`pwd`

mv src/job_info .
echo ' ' >> job_info
echo ' Job directory:' >> job_info
echo $datadir >> job_info

echo ' To set the job running, type'
echo cd $datadir
echo bat log $algo
echo
