#!/usr/bin/env python

#=====perform the various imports========
#=======needed by the main code==========
import sys,os,warnings
uname=os.getlogin()
homedir=os.getenv('HOME')
rootdir=os.path.join(homedir,'hydra','scripts')
moddir=os.path.join(rootdir,'modules')
graphicsdir=os.path.join(rootdir,'graphics')
sys.path.append(moddir)
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.colors as clrs
import matplotlib.ticker as ticker
from mpl_toolkits.axes_grid1 import make_axes_locatable
import argparse
warnings.simplefilter("ignore",DeprecationWarning)

#========================================
#=====various function definitions=======
#========================================

def parse_args():
  parser = argparse.ArgumentParser(prog='dataview')
  parser.add_argument('input', metavar='input_filename' , type=str , help='Input file')
  parser.add_argument('-frame', metavar='frame_no' , type=int,default='1', help='First frame number to show')
  parser.add_argument('-ndim', metavar='n_dim' , type=int , nargs=2, default=[256,256], help='Number of x, and y grid points: nx ny')
  parser.add_argument('-lims', metavar='v_lim' , type=float , nargs=2, help='Lower and upper limits for the colourmap range')
  parser.add_argument('-extent', metavar='extent' , type=float , nargs=4, help='Extent of the plot [xmin,xmax,ymin,ymax]')
  parser.add_argument('-xlims', metavar='xlims' , type=float , nargs=2, help='Lower and upper x grid points/values to image')
  parser.add_argument('-ylims', metavar='ylims' , type=float , nargs=2, help='Lower and upper y grid points/balues to image')
  parser.add_argument('-x0', action='store_true' , help='Read in an extra point in the x direction - useful for aperiodic codes')  
  parser.add_argument('-y0', action='store_true' , help='Read in an extra point in the y direction - useful for aperiodic codes')  
  parser.add_argument('-glob', action='store_true' , help='Scale colours based on the global min/max (or abs values) across all frames')  
  parser.add_argument('-mod', action='store_true' , help='Scale colours based on +/- the max absolute value rather than straight min/max')  
  parser.add_argument('-cb', action='store_true' , help='Add colourbar to plots - currently only makes sense for constant colourmap limits')  
  parser.add_argument('-cbcme', action='store_true' , help='Add colourbar to plots - currently only makes sense for constant colourmap limits') 
  parser.add_argument('-cmap', metavar='cmap' , default='stamap', type=str , help='Colour map to use')
  parser.add_argument('-noticks', action='store_true' , help='Remove tickmarks and labels from the axes') 
#XXXYYY
  parser.add_argument('-title', metavar='title' , type=str , nargs=1, help='Assign title')
  parser.add_argument('-outticks', action='store_true' , help='Change tick marks to outside (only works on recent Python)') 
  parser.add_argument('-xticks', metavar='xticks' , type=float , nargs=3, help='Min, max and step for x tick marks')
  parser.add_argument('-axlab1', metavar='axlab1' , type=float , nargs=2, help='Re-label x axis with number and auto increase in number (must also use xticks)')
  parser.add_argument('-axlab2', metavar='axlab2' , type=str , nargs=1, help='Re-label x axis with text in front of number (must also use xticks and axlab1)')
  parser.add_argument('-minxticks', metavar='minxticks' , type=float , nargs=3, help='Min, max and step for minor x tick marks (only works on recent Python)')
  parser.add_argument('-xtitle', metavar='xtitle' , type=str , nargs=1, help='Assign x axis title')
  parser.add_argument('-yticks', metavar='yticks' , type=float , nargs=3, help='Min, max and step for y tick marks')
  parser.add_argument('-aylab1', metavar='aylab1' , type=float , nargs=2, help='Re-label y axis with number and auto increase in number (must also use yticks)')
  parser.add_argument('-ytitle', metavar='ytitle' , type=str , nargs=1, help='Assign y axis title')
  parser.add_argument('-aspect', metavar='aspect' , type=float , nargs=1, help='Change the aspect ratio of the output image (default is 1)')
#XXXYYY
  parser.add_argument('-notitle', action='store_true' , help='Remove title with frame number')  
  parser.add_argument('-notime', action='store_true' , help='Do not read a time interleaved with the frames')  
  parser.add_argument('-dpi', metavar='dpi' , type=int , default='800', help='dpi of any saved image file')
  parser.add_argument('-mult', metavar='mult' , type=int,default='1', help='Factor to increase stated grid resolution by in each direction (eg 16x)')
  parser.add_argument('-skip', metavar='skip' , type=int,default='1', help='How many x and y poionts to skip (i.e. read every [skip] points)')
  args = parser.parse_args() 
  return args

#---------------------------

def readtxtfile(args):
  # Open input file:
  try:
    in_file = open(args.input,'r')# try opening passed filename  
  except IOError:
     print ("File could not be opened")
     sys.exit()
  
  # Set up grid point numbers
  nx = args.ndim[0]*args.mult
  ny = args.ndim[1]*args.mult

  # Add extra points for aperiodic codes
  if args.x0:
    nx = nx+1
  if args.y0:
    ny = ny+1
    
  #  Read in data and close input file:
  raw_array = np.array(np.fromfile(file=in_file,dtype=float,sep='\n'))
  in_file.close()

  # Set whether to read a time or not:
  if not args.notime:
    itime=1
  else:
    itime=0     
  # Set the number of frames:
  N = nx*ny
  nframes = int(len(raw_array)/(N+itime))  
  print(' Number of frames generated: %d' %nframes)

  # Shape the data array into a useful shape for plotting:
  frames = range(nframes)
  out_array = np.empty((nframes,nx,ny))
  for i in frames:
    out_array[i,:,:] = raw_array[i*(N+itime)+itime:(i+1)*(N+itime)].reshape(nx,ny)
  return frames,out_array

#---------------------------

def readi4file(args):
  import struct

  # Open input file:
  try:
    in_file = open(args.input,'r')# try opening passed filename  
  except IOError:
     print ("File could not be opened")
     sys.exit()

  # Set up grid point numbers
  nx = args.ndim[0]*args.mult
  ny = args.ndim[1]*args.mult

  # Add extra points for aperiodic codes
  if args.x0:
    nx = nx+1
  if args.y0:
    ny = ny+1

  # Set the number of frames:
  N = nx*ny
  file_bytes = os.path.getsize(args.input)
  nframes = int(file_bytes/(N*4))
  print(' Number of frames generated: %d' %nframes)

  frames = range(nframes)
  raw_array = np.zeros(N*nframes,float)
  for j in range(nframes):
    i = j*N
    while i < j*N+N:
      bytes = in_file.read(4)
      raw_array[i] = float(struct.unpack('i',bytes)[0])
      i+=1
  in_file.close()    
  return frames,raw_array.reshape((nframes,nx,ny))

#---------------------------

def readc1file(args):
  import struct

  # Open input file:
  try:
    in_file = open(args.input,'r')# try opening passed filename  
  except IOError:
     print ("File could not be opened")
     sys.exit()

  # Set up grid point numbers
  nx = args.ndim[0]*args.mult
  ny = args.ndim[1]*args.mult

  # Add extra points for aperiodic codes
  if args.x0:
    nx = nx+1
  if args.y0:
    ny = ny+1

  # Set the number of frames:
  N = nx*ny
  file_bytes = os.path.getsize(args.input)
  nframes = int(file_bytes/N)
  print(' Number of frames generated: %d' %nframes)

  frames = range(nframes)
  raw_array = np.zeros(N*nframes,float)
  for j in range(nframes):
    i = j*N
    while i < j*N+N:
      bytes = in_file.read(1)
      raw_array[i] = float(struct.unpack('B',bytes)[0])
      i+=1
  in_file.close()    
  return frames,raw_array.reshape((nframes,nx,ny))

#---------------------------

def readc2file(args):
  import struct

  # Open input file:
  try:
    in_file = open(args.input,'r')# try opening passed filename  
  except IOError:
     print ("File could not be opened")
     sys.exit()

  # Set up grid point numbers
  nx = args.ndim[0]*args.mult
  ny = args.ndim[1]*args.mult

  # Add extra points for aperiodic codes
  if args.x0:
    nx = nx+1
  if args.y0:
    ny = ny+1

  # Set the number of frames:
  N = nx*ny
  file_bytes = os.path.getsize(args.input)
  nframes = int(file_bytes/(N*2))
  print(' Number of frames generated: %d' %nframes)

  frames = range(nframes)
  raw_array = np.zeros(N*nframes,float)
  for j in range(nframes):
    i = j*N
    while i < j*N+N:
      bytes1 = in_file.read(1)
      bytes2 = in_file.read(1)
      b1=int(struct.unpack('B',bytes1)[0])
      b2=int(struct.unpack('B',bytes2)[0])
      raw_array[i] = float(b1*256+b2)
      i+=1
  in_file.close()    
  return frames,raw_array.reshape((nframes,nx,ny))

#---------------------------

def readr4file(args):

  # Open input file:
  try:
    in_file = open(args.input,'r')# try opening passed filename  
  except IOError:
     print ("File could not be opened")
     sys.exit()

  # Set up grid point numbers
  nx = args.ndim[0]*args.mult
  ny = args.ndim[1]*args.mult

  # Add extra points for aperiodic codes
  if args.x0:
    nx = nx+1
  if args.y0:
    ny = ny+1

  # Set whether to read a time or not:
  if not(args.notime):
    itime=1
  else:
    itime=0     
  # Set the number of frames:
  file_bytes = os.path.getsize(args.input)
  N = nx*ny  
  nframes = int(file_bytes/((N+itime)*4))
  print(' Number of frames generated: %d' %nframes)
  frames = range(nframes)
  raw_array = np.fromfile(in_file,dtype=np.float32)
  out_array = np.empty((nframes,nx,ny))
  for i in frames:
    out_array[i,:,:] = raw_array[i*(N+itime)+itime:(i+1)*(N+itime)].reshape(nx,ny)
  in_file.close()    
  return frames,out_array

#---------------------------

def readi2file(args):

  # Open input file:
  try:
    in_file = open(args.input,'r')# try opening passed filename  
  except IOError:
     print ("File could not be opened")
     sys.exit()

  # Set up grid point numbers
  nx = args.ndim[0]*args.mult
  ny = args.ndim[1]*args.mult

  # Add extra points for aperiodic codes
  if args.x0:
    nx = nx+1
  if args.y0:
    ny = ny+1

  # Set the number of frames:
  file_bytes = os.path.getsize(args.input)
  N = nx*ny  
  nframes = int(file_bytes/(N*2))
  print(' Number of frames generated: %d' %nframes)
  frames = range(nframes)
  raw_array = np.fromfile(in_file,dtype=np.dtype('u2'))+2**15-1
  in_file.close()    
  return frames,raw_array.reshape((nframes,nx,ny))

#---------------------------

def readr8file(args):

  # Open input file:
  try:
    in_file = open(args.input,'r')# try opening passed filename  
  except IOError:
     print ("File could not be opened")
     sys.exit()

  # Set up grid point numbers
  nx = args.ndim[0]*args.mult
  ny = args.ndim[1]*args.mult

  # Add extra points for aperiodic codes
  if args.x0:
    nx = nx+1
  if args.y0:
    ny = ny+1

  # Set whether to read a time or not:
  if not(args.notime):
    itime=1
  else:
    itime=0     
  # Set the number of frames:
  file_bytes = os.path.getsize(args.input)
  N = nx*ny
  nframes = int(file_bytes/((N+itime)*8))
  print(' Number of frames generated: %d' %nframes)
  frames = range(nframes)
  raw_array = np.fromfile(in_file,dtype=np.float64)
  out_array = np.empty((nframes,nx,ny),dtype=np.float64)
  for i in frames:
    out_array[i,:,:] = raw_array[i*(N+itime)+itime:(i+1)*(N+itime)].reshape(nx,ny)
  in_file.close()    
  return frames,out_array

#---------------------------

def get_colourmap():
  cmap_file = open(os.path.join(graphicsdir,'colourmap'),'r')
  cmap_list = []
  istart=1024
  iend=256**2-istart
  for i in range(istart):
    file_line = cmap_file.readline().split()
  for i in range(iend+1):
    file_line = cmap_file.readline().split()
    a,b,c = file_line[0],file_line[1],file_line[2]
    ele = (float(a),float(b),float(c))
    cmap_list.append(ele)
  stamap = clrs.LinearSegmentedColormap.from_list('amap',cmap_list,N=iend-istart+1)
  plt.register_cmap(cmap=stamap)
  return {'stamap':stamap,'jet':plt.cm.jet,'seismic':plt.cm.seismic,'rjet':plt.cm.jet_r,'rseismic':plt.cm.seismic_r,'autumn':plt.cm.autumn,'winter':plt.cm.winter,'spring':plt.cm.spring,
          'summer':plt.cm.summer,'hot':plt.cm.hot,'bone':plt.cm.bone,'rbone':plt.cm.bone_r,'cool':plt.cm.cool,'copper':plt.cm.copper,
          'gray':plt.cm.gray,'hsv':plt.cm.hsv,'prism':plt.cm.prism,'pink':plt.cm.pink,'RdBu':plt.cm.RdBu,
          'rRdBu':plt.cm.RdBu_r,'Blues':plt.cm.Blues,'rBlues':plt.cm.Blues_r,'GnBu':plt.cm.GnBu,'PuBu':plt.cm.PuBu,'BuPu':plt.cm.BuPu,
          'YlGnBu':plt.cm.YlGnBu,'Greys':plt.cm.Greys,'binary':plt.cm.binary,'rainbow':plt.cm.gist_rainbow,'flag':plt.cm.flag}

#---------------------------

def show_frames(frames,main_array,args,cmap_val,lev_mins,lev_maxs):
  def draw_frame(event):
    global im,extent,glob_cmap_val,cb
    axes=event.canvas.figure.get_axes()[0]
    xlim=axes.get_xlim()
    ylim=axes.get_ylim()
    axes.clear()
#    im.remove
    im=axes.imshow(main_array[frame].T,cmap=glob_cmap_val,vmin=lev_mins[frame],vmax=lev_maxs[frame],extent=extent,origin='lower',interpolation='bilinear')
    if args.noticks:
      ax.set_xticklabels([])
      ax.set_yticklabels([])
      ax.xaxis.set_ticks_position('none')
      ax.yaxis.set_ticks_position('none')

    # Changing the location of the x-axis tick marks (first, last+1, step)
    if args.xticks:
      ax.xaxis.set_ticks(np.arange(args.xticks[0], args.xticks[1]+1, args.xticks[2]))
      ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.01f'))
    # Adding new labels to the x-axis ticks (first value, value increment)
    if args.axlab1:
      n=int((args.xticks[1]+1-args.xticks[0])/args.xticks[2])
      xlabels = [item.get_text() for item in ax.get_xticklabels()]
      for x in xrange(n+1):
        p=args.axlab1[0]+x*args.axlab1[1]
        # An option to add text as well as values (e.g. 'Jan' before the year)
        if args.axlab2:
          xlabels[x] = '%s %d' % (args.axlab2[0], p)
        else:
          xlabels[x] = '%d' %p
      ax.set_xticklabels(xlabels,fontsize='medium')
    # Changing the location of the y-axis tick marks (first, last+1, step)
    if args.yticks:
      ax.yaxis.set_ticks(np.arange(args.yticks[0], args.yticks[1]+1, args.yticks[2]))
      ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.01f'))
    # Adding new labels to the y-axis ticks (first value, value increment)
      if args.aylab1:
        n=int((args.yticks[1]+1-args.yticks[0])/args.yticks[2])
        ylabels = [item.get_text() for item in ax.get_yticklabels()]
        for x in xrange(n+1):
          p=args.aylab1[0]+x*args.aylab1[1]
          ylabels[x] = '%d' %p 
        ax.set_yticklabels(ylabels,fontsize='medium')

    # Add minor ticks to the x-axis (first, last+1, step) and make the major ticks bigger
    if args.minxticks:
      minorticks = np.arange(args.minxticks[0], args.minxticks[1]+1, args.minxticks[2])
      ax.xaxis.set_ticks(minorticks, minor=True)
      plt.tick_params(axis='x',which='major', width=1.2)
      plt.tick_params(axis='x',which='minormajor', width=1)

    # Move all tick marks to the outside of the plot
    if args.outticks:
      ax.tick_params(axis='both',which='both',direction='out')

    # Label the x-axis
    if args.xtitle:
      xtitle = args.xtitle[0]
      ax.set_xlabel('%s' %xtitle,fontsize='medium')

    # Label the y-axis
    if args.ytitle:
      ytitle = args.ytitle[0]
      ax.set_ylabel('%s' %ytitle,fontsize='medium')

    # Set title to display frame no.
    axes.set_title('Frame no.: %s ;  Min/Max %5.3e/%5.3e' %(frame+1,main_array[frame].min(),main_array[frame].max()))
    # Remove the plot title
    if args.notitle:
      ax.set_title('')

    # Change the plot title
    if args.title:
      title = args.title[0]
      ax.set_title('%s' %title)

    #if args.cb:
    #  plt.colorbar(im)
    axes.set_xlim(xlim)  
    axes.set_ylim(ylim)
    fig.canvas.draw()
    return
    
  def on_press(event):
    global keys,frame,nframes
    if event.key not in 'lcsfh':
      keys.add(event.key)  
    if len(keys) == 1 and '=' in keys:
      frame = (frame+1+nframes) % nframes
      draw_frame(event)
    if len(keys)==1 and '-' in keys:
      frame = (frame-1+nframes) % nframes
      draw_frame(event)
    if len(keys)==1 and '1' in keys:
      frame = int(nframes/10)
      draw_frame(event)
    if len(keys)==1 and '2' in keys:
      frame = 2*int(nframes/10)
      draw_frame(event)
    if len(keys)==1 and '3' in keys:
      frame = 3*int(nframes/10)
      draw_frame(event)
    if len(keys)==1 and '4' in keys:
      frame = 4*int(nframes/10)
      draw_frame(event)
    if len(keys)==1 and '5' in keys:
      frame = 5*int(nframes/10)
      draw_frame(event)
    if len(keys)==1 and '6' in keys:
      frame = 6*int(nframes/10)
      draw_frame(event)
    if len(keys)==1 and '7' in keys:
      frame = 7*int(nframes/10)
      draw_frame(event)
    if len(keys)==1 and '8' in keys:
      frame = 8*int(nframes/10)
      draw_frame(event)
    if len(keys)==1 and '9' in keys:
      frame = 9*int(nframes/10)
      draw_frame(event)
    if len(keys)==1 and '0' in keys:
      frame = 0
      draw_frame(event)
    if 'r' in keys:
      keys.clear()
      keys.add('r')
    return
      
  def on_release(event):
    global keys
    keys.remove(event.key)  
    return
  
  global frame,keys,im,nframes,extent,glob_cmap_val,cb
  glob_cmap_val=cmap_val
  nframes=len(frames)
  keys=set()
  if args.frame <= nframes:
    frame=args.frame-1
  else:
    print(' Cannot start at the specified frame as fewer frames are found')
    frame=0

  extent = [0,len(main_array[frame]),0,len(main_array[frame,0])]
  if args.extent:
    extent = args.extent

  if args.aspect:
    aspect1=args.aspect[0]
    cbarmult=args.aspect[0]
  else:
    #aspect1='auto'
    aspect1=1.0
    cbarmult=1

  # Make a plot figure:
  fig = plt.figure(1)
  #XXYY
  ax = fig.add_subplot(111)
  im = ax.imshow(main_array[frame].T,cmap=cmap_val,vmin=lev_mins[frame],vmax=lev_maxs[frame],extent=extent,origin='lower',interpolation='bilinear', aspect=aspect1)

  # Set x & y axes limits:
  if args.xlims:
    ax.set_xlim(args.xlims)  
  if args.ylims:
    ax.set_ylim(args.ylims)

  # Set ticks or not:
  if args.noticks:
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    ax.xaxis.set_ticks_position('none')
    ax.yaxis.set_ticks_position('none')

  # Changing the location of the x-axis tick marks (first, last+1, step)
  if args.xticks:
    ax.xaxis.set_ticks(np.arange(args.xticks[0], args.xticks[1]+1, args.xticks[2]))
    ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.01f'))
    # Adding new labels to the x-axis ticks (first value, value increment)
    if args.axlab1:
      n=int((args.xticks[1]+1-args.xticks[0])/args.xticks[2])
      xlabels = [item.get_text() for item in ax.get_xticklabels()]
      # An option to add text as well as values (e.g. 'Jan' before the year)
      for x in xrange(n+1):
        p=args.axlab1[0]+x*args.axlab1[1]
        if args.axlab2:
          xlabels[x] = '%s %d' % (args.axlab2[0], p)
        else:
          xlabels[x] = '%d' %p
      ax.set_xticklabels(xlabels,fontsize='medium')
  # Changing the location of the y-axis tick marks (first, last+1, step)
  if args.yticks:
    ax.yaxis.set_ticks(np.arange(args.yticks[0], args.yticks[1]+1, args.yticks[2]))
    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.01f'))
    # Adding new labels to the y-axis ticks (first value, value increment)
    if args.aylab1:
      n=int((args.yticks[1]+1-args.yticks[0])/args.yticks[2])
      ylabels = [item.get_text() for item in ax.get_yticklabels()]
      for x in xrange(n+1):
        p=args.aylab1[0]+x*args.aylab1[1]
        ylabels[x] = '%d' %p 
      ax.set_yticklabels(ylabels,fontsize='medium')
 
  # Add minor ticks to the x-axis (first, last+1, step) and make the major ticks bigger
  if args.minxticks:
    minorticks = np.arange(args.minxticks[0], args.minxticks[1]+1, args.minxticks[2])
    ax.xaxis.set_ticks(minorticks, minor=True)
    plt.tick_params(axis='x',which='major', width=1.2)
    plt.tick_params(axis='x',which='minor', width=1)

  # Move all tick marks to the outside of the plot
  if args.outticks:
    ax.tick_params(axis='both',which='both',direction='out')

  # Label the x-axis
  if args.xtitle:
    xtitle = args.xtitle[0]
    ax.set_xlabel('%s' %xtitle,fontsize='medium')

  # Label the y-axis
  if args.ytitle:
    ytitle = args.ytitle[0]
    ax.set_ylabel('%s' %ytitle,fontsize='medium')
 #XXXYYY

  # Set title to display frame no.
  ax.set_title('Frame no.: %s ;  Min/Max %5.3e/%5.3e' %(frame+1,main_array[frame].min(),main_array[frame].max()))
  # Remove the plot title
  if args.notitle:
    ax.set_title('')

  # Change the plot title
  if args.title:
    title = args.title[0]
    ax.set_title('%s' %title)

  # Add a colour bar
  if args.cb:
    cb=plt.colorbar(im)

  # Add Cristina's color bar 
  if args.cbcme:
    divider = make_axes_locatable(ax)
    #cbar aspect for site 4 with plot aspect 0.85 is 11.1
    #cbar aspect for site 7 with plot aspect 0.85 is 17.6
    cax1 = divider.append_axes("right", size="5%", pad=0.3, aspect='auto')
    cb=plt.colorbar(im, ticks=[0,0.2,0.4,0.6,0.8,1], orientation='vertical', cax = cax1)
    cb.set_ticklabels([0, 20, 40, 60, 80, 100])
    cb.set_label('Water saturation (%)',fontsize='medium')
    cb.ax.invert_yaxis()
    cb.ax.tick_params(axis='y', direction='out')
  # Connect key presses to event handlers:
  cid=fig.canvas.mpl_connect('key_press_event',on_press)
  cid2=fig.canvas.mpl_connect('key_release_event',on_release)
      
  # Close the individual figure
  plt.show()

#========================================
#============main code===================

if __name__ == '__main__':
  # Read and parse command line arguments

  args = parse_args()

  # Open input file and read in main
  # array for plotting
  suffix = args.input.split('.')[-1]

  if suffix == 'dat' or suffix == 'asc':
    print(' Reading formatted text input file')
    frames,main_array = readtxtfile(args)
  elif suffix == 'r4':
    print(' Reading real input file')
    frames,main_array = readr4file(args)
  elif suffix == 'r8':
    print(' Reading double precision input file')
    frames,main_array = readr8file(args)
  elif suffix == 'i2':
    print(' Reading short integer input file')
    frames,main_array = readi2file(args)
  elif suffix == 'i4':
    print(' Reading integer input file')
    frames,main_array = readi4file(args)
  elif suffix == 'c1':
    print(' Reading single character input file')
    frames,main_array = readc1file(args)
  elif suffix == 'c2':
    print(' Reading two character input file')
    frames,main_array = readc2file(args)
  else:
    print(' Not sure what the file format is')
    print(' based on the extension --- default to formatted text')
    frames,main_array = readtxtfile(args)

  # Set saved image dpi
  mpl.rcParams['savefig.dpi'] = args.dpi

  # Get colourmaps:
  cmaps = get_colourmap()

  # Get colourmap value from cmap dict
  cmap_val = cmaps.get(args.cmap)

  # Set frame min/max for colour scaling:
  lev_mins=[]
  lev_maxs=[]

  if args.lims:
    lev_min = args.lims[0]
    lev_max = args.lims[1]
    lev_mins=[lev_min for frame in frames]
    lev_maxs=[lev_max for frame in frames]
  else:
    if args.glob:
      if args.mod:        
        lev_max = max(abs(main_array.min()),abs(main_array.max()))
        lev_min = -lev_max
      else:
        lev_min = main_array.min()
        lev_max = main_array.max()    
      lev_mins=[lev_min for frame in frames]
      lev_maxs=[lev_max for frame in frames]
    else:
      if args.mod:
        for frame in frames:
          lev_max = max(abs(main_array[frame].min()),abs(main_array[frame].max()))
          lev_min = -lev_max
          lev_mins.append(lev_min)
          lev_maxs.append(lev_max)
      else:
        for frame in frames:
          lev_min = main_array[frame].min()
          lev_max = main_array[frame].max()    
          lev_mins.append(lev_min)
          lev_maxs.append(lev_max)
  # Pass control to subroutines controlling image
  # viewing:
  show_frames(frames,main_array[:,::args.skip,::args.skip],args,cmap_val,lev_mins,lev_maxs)
